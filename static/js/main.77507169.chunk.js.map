{"version":3,"sources":["components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleClick","clicked","url","src","alt","App","state","score","fonz","_this","setFalse","fonzies","alert","resetScore","tempFonz","findIndex","f","setState","shuffleArray","array","i","length","j","Math","floor","random","temp","arr","forEach","x","this","_this2","console","log","map","u","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kdAEO,SAASA,EAAKC,GAEjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8BC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,QAASP,EAAMQ,OAC/FP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBK,IAAKT,EAAMQ,IAAKE,IAAI,yBCmEjDC,6MAlEbC,MAAQ,CACNC,MAAO,EACPC,KAAMC,EAAKC,SAASC,MAmBtBX,YAAc,SAACC,EAASC,GACtB,GAAGD,EACDW,MAAM,yBACNH,EAAKI,iBAEF,CAGH,IAAIC,EAAWL,EAAKH,MAAME,KAC1BM,EAASA,EAASC,UAAU,SAAAC,GAAC,OAAIA,EAAEd,MAAQA,KAAMD,SAAU,EAC3DQ,EAAKQ,SAAU,CAAEV,MAAOE,EAAKH,MAAMC,MAAQ,EAAGC,KAAMC,EAAKS,aAAaJ,mFA1B7DK,GAEX,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,mCAGAQ,GAEP,OADAA,EAAIC,QAAQ,SAACC,EAAET,EAAEO,GAAL,OAAaA,EAAIP,GAAGnB,SAAU,IACnC0B,0CAkBPG,KAAKb,SAAS,CAAEV,MAAOuB,KAAKxB,MAAMC,MAAM,yCAIxCuB,KAAKb,SAAU,CAACV,MAAO,EAAGC,KAAMsB,KAAKZ,aAAaY,KAAKpB,SAASC,uCAGzD,IAAAoB,EAAAD,KAEP,OADAE,QAAQC,IAAIH,KAAKxB,OAEfX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,iEAGAF,EAAAC,EAAAC,cAAA,uJAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAMH,EAAAC,EAAAC,cAAA,WAAMiC,KAAKxB,MAAME,KAAK0B,IAAI,SAACC,EAAEf,GAAH,OAASzB,EAAAC,EAAAC,cAACJ,EAAD,CAAMS,IAAKiC,EAAEjC,IAAKkC,IAAKhB,EAAGpB,YAAa+B,EAAK/B,YAAaC,QAASkC,EAAElC,cAE5HN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,WADF,IAC6CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBgC,KAAKxB,MAAMC,kBA5DnF8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77507169.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Card(props) {\r\n\r\n    return(\r\n        <div className=\"card d-inline-block p-1 m-3\" onClick={() => props.handleClick(props.clicked, props.url)}>\r\n            <img className=\"card-img h-100\" src={props.url} alt=\"The Fonz\" />\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\nimport '../App.css';\nimport {Card} from './Card.js'\nimport fonzies from '../fonzies.json';\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    fonz: this.setFalse(fonzies)\n  }\n\n  shuffleArray(array) {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  setFalse(arr) {\n    arr.forEach((x,i,arr) => arr[i].clicked = false)\n    return arr\n  }\n\n  handleClick = (clicked, url) => {\n    if(clicked){\n      alert(\"Womp Womp. Try Again.\")\n      this.resetScore();\n    }\n    else {\n      \n      // If this card was not clicked yet, find the index of the card in state.fonz and set its clicked value to true then reshuffle the cards\n      var tempFonz = this.state.fonz\n      tempFonz[tempFonz.findIndex(f => f.url === url)].clicked = true;\n      this.setState( { score: this.state.score + 1, fonz: this.shuffleArray(tempFonz) });\n    }\n  }\n\n  increaseScore() {\n    this.setState({ score: this.state.score+1})\n  }\n\n  resetScore() {\n    this.setState( {score: 0, fonz: this.shuffleArray(this.setFalse(fonzies))})\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Welcome to the coolest clicky game on the internet.\n          </h1>\n          <h5>Click each card once to earn a point but click the same card twice and you lose. Be careful, the cards are tricky and move when clicked.</h5>\n        </header>\n        <div className=\"container\">\n          <div className=\"row\"><div>{this.state.fonz.map((u,i) => <Card url={u.url} key={i} handleClick={this.handleClick} clicked={u.clicked}/>)}</div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col mx-auto\">\n              <span className=\"score h1 \">Score: </span> <span className=\"score h2 mt-2\">{this.state.score}</span></div>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}